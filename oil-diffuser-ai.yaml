blueprint:
  name: Oil Diffuser Ai
  description: |
    ![OilDiffuser](https://raw.githubusercontent.com/zodyking/oil-diffuser-blueprint/refs/heads/main/ChatGPT%20Image%20Oct%2018%2C%202025%2C%2007_21_16%20PM.png)

    Control a waterless oil diffuser via a smart outlet with two independent modes:
    1) duty_cycle: every X minutes, turn ON for Y minutes
    2) presence: when presence detected, turn ON for Y minutes
    Optional TTS before ON and a safety max-runtime cutoff.
  domain: automation
  author: chat.openai.com/@gpt
  source_url: https://example.com/blueprints/oil_diffuser_ai

  input:
    # -------- Required --------
    outlet_switch:
      name: Diffuser Outlet (switch)
      selector:
        entity:
          domain: switch

    operation_mode:
      name: Operation Mode
      description: "Choose 'duty_cycle' or 'presence'."
      default: duty_cycle
      selector:
        select:
          options:
            - duty_cycle
            - presence

    # -------- Duty-Cycle (used when operation_mode = duty_cycle) --------
    duty_interval_minutes:
      name: Duty-cycle interval (minutes)
      description: "Every X minutes, start one ON period."
      default: 30
      selector:
        number:
          min: 1
          max: 1440
          step: 1
          unit_of_measurement: min
          mode: slider

    duty_on_duration:
      name: Duty-cycle ON duration
      description: "How long to keep the outlet ON each cycle."
      default:
        hours: 0
        minutes: 8
        seconds: 0
      selector:
        duration: {}

    # -------- Presence (used when operation_mode = presence) --------
    presence_sensor:
      name: Presence / Motion Sensor (binary_sensor)
      description: "Used only in presence mode."
      default: ""
      selector:
        entity:
          domain: binary_sensor

    presence_on_state:
      name: Presence 'ON' state
      description: "State of the presence sensor that means present."
      default: "on"
      selector:
        select:
          options: ["on","home","occupied","detected"]

    presence_on_duration:
      name: Presence ON duration
      description: "Duration to keep diffuser ON after presence is detected."
      default:
        hours: 0
        minutes: 20
        seconds: 0
      selector:
        duration: {}

    # -------- TTS (optional) --------
    tts_enabled:
      name: Enable TTS before turning ON
      default: false
      selector:
        boolean: {}

    tts_media_player:
      name: TTS Media Player (optional)
      description: "media_player to play the TTS message on."
      default: ""
      selector:
        entity:
          domain: media_player

    tts_engine_id:
      name: TTS Engine ID (optional)
      description: "If blank, uses default TTS engine."
      default: ""
      selector:
        text: {}

    tts_room_name:
      name: Room name for message
      default: "room"
      selector:
        text: {}

    tts_message:
      name: TTS Message (templated)
      description: "Example: 'Freshening up the room.' Supports the variable room_name."
      default: "Freshening up the {{ room_name }}."
      selector:
        text:
          multiline: true

    # -------- Safety --------
    max_runtime:
      name: Safety cutoff â€” Max ON runtime
      description: "If outlet stays ON this long for any reason, force OFF."
      default:
        hours: 2
        minutes: 0
        seconds: 0
      selector:
        duration: {}

mode: parallel
max: 10
max_exceeded: silent

# ---------------- Variables ----------------
variables:
  # Mode
  op_mode: !input operation_mode

  # Entities / durations
  v_switch: !input outlet_switch
  v_interval: !input duty_interval_minutes
  v_duty_dur: !input duty_on_duration
  v_presence: !input presence_sensor
  v_presence_on: !input presence_on_state
  v_presence_dur: !input presence_on_duration

  # TTS
  v_tts: !input tts_enabled
  v_player: !input tts_media_player
  v_engine: !input tts_engine_id
  room_name: !input tts_room_name
  v_msg: !input tts_message

# ---------------- Triggers ----------------
trigger:
  # Duty-cycle tick (evaluate every minute; branch checks mode & interval)
  - id: duty_tick
    platform: time_pattern
    minutes: "/1"

  # Presence ON (safe even if presence_sensor is blank)
  - id: presence_on
    platform: template
    value_template: >-
      {{ op_mode == 'presence'
         and (v_presence | string | length > 0)
         and is_state(v_presence, v_presence_on) }}

  # Safety cutoff
  - id: safety_cutoff
    platform: state
    entity_id: !input outlet_switch
    to: "on"
    for: !input max_runtime

condition: []

# ---------------- Actions ----------------
action:
  - choose:

      # -------- Duty-cycle mode --------
      - conditions:
          - condition: template
            value_template: "{{ trigger.id == 'duty_tick' and op_mode == 'duty_cycle' }}"
          - condition: template
            value_template: >-
              {% set iv = (v_interval | int(1)) %}
              {{ ((as_timestamp(now()) | int // 60) % iv) == 0 }}
        sequence:
          - if:
              - condition: template
                value_template: "{{ v_tts and (v_player | string | length > 0) and is_state(v_switch,'off') }}"
            then:
              - choose:
                  - conditions:
                      - condition: template
                        value_template: "{{ v_engine | string | length > 0 }}"
                    sequence:
                      - service: tts.speak
                        data:
                          cache: false
                          engine_id: "{{ v_engine }}"
                          media_player_entity_id: "{{ v_player }}"
                          message: "{{ v_msg }}"
                default:
                  - service: tts.speak
                    data:
                      cache: false
                      media_player_entity_id: "{{ v_player }}"
                      message: "{{ v_msg }}"
          - service: switch.turn_on
            target:
              entity_id: !input outlet_switch
          - delay: !input duty_on_duration
          - if:
              - condition: state
                entity_id: !input outlet_switch
                state: "on"
            then:
              - service: switch.turn_off
                target:
                  entity_id: !input outlet_switch

      # -------- Presence mode --------
      - conditions:
          - condition: template
            value_template: "{{ trigger.id == 'presence_on' and op_mode == 'presence' }}"
        sequence:
          - if:
              - condition: template
                value_template: "{{ v_tts and (v_player | string | length > 0) and is_state(v_switch,'off') }}"
            then:
              - choose:
                  - conditions:
                      - condition: template
                        value_template: "{{ v_engine | string | length > 0 }}"
                    sequence:
                      - service: tts.speak
                        data:
                          cache: false
                          engine_id: "{{ v_engine }}"
                          media_player_entity_id: "{{ v_player }}"
                          message: "{{ v_msg }}"
                default:
                  - service: tts.speak
                    data:
                      cache: false
                      media_player_entity_id: "{{ v_player }}"
                      message: "{{ v_msg }}"
          - service: switch.turn_on
            target:
              entity_id: !input outlet_switch
          - delay: !input presence_on_duration
          - if:
              - condition: state
                entity_id: !input outlet_switch
                state: "on"
            then:
              - service: switch.turn_off
                target:
                  entity_id: !input outlet_switch

      # -------- Safety cutoff --------
      - conditions:
          - condition: template
            value_template: "{{ trigger.id == 'safety_cutoff' }}"
        sequence:
          - service: switch.turn_off
            target:
              entity_id: !input outlet_switch
          - service: logbook.log
            data:
              name: Diffuser Safety
              message: "Turned OFF after reaching max runtime."
              entity_id: !input outlet_switch

  - stop: "Done"
